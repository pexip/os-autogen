/*  -*- buffer-read-only: t -*- vi: set ro:
 *  
 *  DO NOT EDIT THIS FILE   (expr.ini)
 *  
 *  It has been AutoGen-ed  June 26, 2011 at 07:40:03 AM by AutoGen 5.11.10pre11
 *  From the definitions    expr.def
 *  and the template file   snarf
 *
 *  copyright (c) 1992-2011 Bruce Korb - all rights reserved
 *
AutoGen is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  AutoGen is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License along
 *  with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Guile Initializations - Ag Global Variables
 */
#include "expr.h"
typedef SCM (*scm_callback_t)(void);
void ag_init(void);

#if GUILE_VERSION >= 108000
#define NEW_PROC(_As, _Ar, _Ao, _Ax, _An)   \
  scm_c_define_gsubr((char*)(_As),          \
                   _Ar, _Ao, _Ax, (scm_callback_t)(void*)ag_scm_ ## _An)
#else
#define NEW_PROC(_As, _Ar, _Ao, _Ax, _An)                                   \
  gh_new_procedure((char*)(_As), (scm_callback_t)(void*)ag_scm_ ## _An,     \
                   _Ar, _Ao, _Ax)
#endif

/*
 * ag Initialization procedure.
 */
void
ag_init(void)
{
static char const g_nm[1062] =
    "ag-fprintf\0"            "ag-function?\0"
    "agpl\0"                  "base-name\0"
    "bsd\0"                   "c-string\0"
    "chdir\0"                 "count\0"
    "def-file\0"              "def-file-line\0"
    "dne\0"                   "emit\0"
    "error\0"                 "error-source-line\0"
    "exist?\0"                "extract\0"
    "find-file\0"             "first-for?\0"
    "for-by\0"                "for-from\0"
    "for-index\0"             "for-sep\0"
    "for-to\0"                "format-arg-count\0"
    "fprintf\0"               "get\0"
    "get-c-name\0"            "get-down-name\0"
    "get-up-name\0"           "gperf\0"
    "gpl\0"                   "hide-email\0"
    "high-lim\0"              "in?\0"
    "join\0"                  "kr-string\0"
    "last-for?\0"             "len\0"
    "lgpl\0"                  "license\0"
    "license-description\0"   "license-full\0"
    "license-info\0"          "license-name\0"
    "low-lim\0"               "make-gperf\0"
    "make-header-guard\0"     "make-tmp-dir\0"
    "makefile-script\0"       "match-value?\0"
    "max\0"                   "min\0"
    "out-delete\0"            "out-depth\0"
    "out-emit-suspended\0"    "out-line\0"
    "out-move\0"              "out-name\0"
    "out-pop\0"               "out-push-add\0"
    "out-push-new\0"          "out-resume\0"
    "out-suspend\0"           "out-switch\0"
    "output-file-next-line\0" "prefix\0"
    "printf\0"                "raw-shell-str\0"
    "set-option\0"            "set-writable\0"
    "shell\0"                 "shell-str\0"
    "shellf\0"                "sprintf\0"
    "stack\0"                 "string-capitalize\0"
    "string-capitalize!\0"    "*=*\0"
    "*==*\0"                  "string-downcase\0"
    "string-downcase!\0"      "*~\0"
    "*~~\0"                   "*=\0"
    "*==\0"                   "==\0"
    "~\0"                     "=\0"
    "*~*\0"                   "*~~*\0"
    "~~\0"                    "~*\0"
    "~~*\0"                   "=*\0"
    "==*\0"                   "string-substitute\0"
    "string->c-name!\0"       "string->camelcase\0"
    "string-tr\0"             "string-tr!\0"
    "string-upcase\0"         "string-upcase!\0"
    "sub-shell-str\0"         "suffix\0"
    "sum\0"                   "time-string->number\0"
    "tpl-file\0"              "tpl-file-line\0"
    "tpl-file-next-line\0"    "version-compare\0";

    NEW_PROC(g_nm +   0, 2, 0, 1, ag_fprintf);
    NEW_PROC(g_nm +  11, 1, 0, 0, ag_function_p);
    NEW_PROC(g_nm +  24, 2, 0, 0, agpl);
    NEW_PROC(g_nm +  29, 0, 0, 0, base_name);
    NEW_PROC(g_nm +  39, 3, 0, 0, bsd);
    NEW_PROC(g_nm +  43, 1, 0, 0, c_string);
    NEW_PROC(g_nm +  52, 1, 0, 0, chdir);
    NEW_PROC(g_nm +  58, 1, 0, 0, count);
    NEW_PROC(g_nm +  64, 0, 0, 0, def_file);
    NEW_PROC(g_nm +  73, 1, 1, 0, def_file_line);
    NEW_PROC(g_nm +  87, 1, 2, 0, dne);
    NEW_PROC(g_nm +  91, 0, 0, 1, emit);
    NEW_PROC(g_nm +  96, 1, 0, 0, error);
    NEW_PROC(g_nm + 102, 0, 0, 0, error_source_line);
    NEW_PROC(g_nm + 120, 1, 0, 0, exist_p);
    NEW_PROC(g_nm + 127, 2, 2, 0, extract);
    NEW_PROC(g_nm + 135, 1, 1, 0, find_file);
    NEW_PROC(g_nm + 145, 0, 1, 0, first_for_p);
    NEW_PROC(g_nm + 156, 1, 0, 0, for_by);
    NEW_PROC(g_nm + 163, 1, 0, 0, for_from);
    NEW_PROC(g_nm + 172, 0, 1, 0, for_index);
    NEW_PROC(g_nm + 182, 1, 0, 0, for_sep);
    NEW_PROC(g_nm + 190, 1, 0, 0, for_to);
    NEW_PROC(g_nm + 197, 1, 0, 0, format_arg_count);
    NEW_PROC(g_nm + 214, 2, 0, 1, fprintf);
    NEW_PROC(g_nm + 222, 1, 1, 0, get);
    NEW_PROC(g_nm + 226, 1, 0, 0, get_c_name);
    NEW_PROC(g_nm + 237, 1, 0, 0, get_down_name);
    NEW_PROC(g_nm + 251, 1, 0, 0, get_up_name);
    NEW_PROC(g_nm + 263, 2, 0, 0, gperf);
    NEW_PROC(g_nm + 269, 2, 0, 0, gpl);
    NEW_PROC(g_nm + 273, 2, 0, 0, hide_email);
    NEW_PROC(g_nm + 284, 1, 0, 0, high_lim);
    NEW_PROC(g_nm + 293, 1, 0, 1, in_p);
    NEW_PROC(g_nm + 297, 1, 0, 1, join);
    NEW_PROC(g_nm + 302, 1, 0, 0, kr_string);
    NEW_PROC(g_nm + 312, 0, 1, 0, last_for_p);
    NEW_PROC(g_nm + 322, 1, 0, 0, len);
    NEW_PROC(g_nm + 326, 3, 0, 0, lgpl);
    NEW_PROC(g_nm + 331, 4, 0, 0, license);
    NEW_PROC(g_nm + 339, 3, 1, 0, license_description);
    NEW_PROC(g_nm + 359, 3, 2, 0, license_full);
    NEW_PROC(g_nm + 372, 3, 2, 0, license_info);
    NEW_PROC(g_nm + 385, 1, 0, 0, license_name);
    NEW_PROC(g_nm + 398, 1, 0, 0, low_lim);
    NEW_PROC(g_nm + 406, 1, 0, 1, make_gperf);
    NEW_PROC(g_nm + 417, 1, 0, 0, make_header_guard);
    NEW_PROC(g_nm + 435, 0, 0, 0, make_tmp_dir);
    NEW_PROC(g_nm + 448, 1, 0, 0, makefile_script);
    NEW_PROC(g_nm + 464, 3, 0, 0, match_value_p);
    NEW_PROC(g_nm + 477, 0, 0, 1, max);
    NEW_PROC(g_nm + 481, 0, 0, 1, min);
    NEW_PROC(g_nm + 485, 0, 0, 0, out_delete);
    NEW_PROC(g_nm + 496, 0, 0, 0, out_depth);
    NEW_PROC(g_nm + 506, 1, 0, 0, out_emit_suspended);
    NEW_PROC(g_nm + 525, 0, 0, 0, out_line);
    NEW_PROC(g_nm + 534, 1, 0, 0, out_move);
    NEW_PROC(g_nm + 543, 0, 0, 0, out_name);
    NEW_PROC(g_nm + 552, 0, 1, 0, out_pop);
    NEW_PROC(g_nm + 560, 1, 0, 0, out_push_add);
    NEW_PROC(g_nm + 573, 0, 1, 0, out_push_new);
    NEW_PROC(g_nm + 586, 1, 0, 0, out_resume);
    NEW_PROC(g_nm + 597, 1, 0, 0, out_suspend);
    NEW_PROC(g_nm + 609, 1, 0, 0, out_switch);
    NEW_PROC(g_nm + 620, 0, 2, 0, output_file_next_line);
    NEW_PROC(g_nm + 642, 2, 0, 0, prefix);
    NEW_PROC(g_nm + 649, 1, 0, 1, printf);
    NEW_PROC(g_nm + 656, 1, 0, 0, raw_shell_str);
    NEW_PROC(g_nm + 670, 1, 0, 0, set_option);
    NEW_PROC(g_nm + 681, 0, 1, 0, set_writable);
    NEW_PROC(g_nm + 694, 1, 0, 0, shell);
    NEW_PROC(g_nm + 700, 1, 0, 0, shell_str);
    NEW_PROC(g_nm + 710, 1, 0, 1, shellf);
    NEW_PROC(g_nm + 717, 1, 0, 1, sprintf);
    NEW_PROC(g_nm + 725, 1, 0, 0, stack);
    NEW_PROC(g_nm + 731, 1, 0, 0, string_capitalize);
    NEW_PROC(g_nm + 749, 1, 0, 0, string_capitalize_x);
    NEW_PROC(g_nm + 768, 2, 0, 0, string_contains_eqv_p);
    NEW_PROC(g_nm + 772, 2, 0, 0, string_contains_p);
    NEW_PROC(g_nm + 777, 1, 0, 0, string_downcase);
    NEW_PROC(g_nm + 793, 1, 0, 0, string_downcase_x);
    NEW_PROC(g_nm + 810, 2, 0, 0, string_end_eqv_match_p);
    NEW_PROC(g_nm + 813, 2, 0, 0, string_end_match_p);
    NEW_PROC(g_nm + 817, 2, 0, 0, string_ends_eqv_p);
    NEW_PROC(g_nm + 820, 2, 0, 0, string_ends_with_p);
    NEW_PROC(g_nm + 824, 2, 0, 0, string_equals_p);
    NEW_PROC(g_nm + 827, 2, 0, 0, string_eqv_match_p);
    NEW_PROC(g_nm + 829, 2, 0, 0, string_eqv_p);
    NEW_PROC(g_nm + 831, 2, 0, 0, string_has_eqv_match_p);
    NEW_PROC(g_nm + 835, 2, 0, 0, string_has_match_p);
    NEW_PROC(g_nm + 840, 2, 0, 0, string_match_p);
    NEW_PROC(g_nm + 843, 2, 0, 0, string_start_eqv_match_p);
    NEW_PROC(g_nm + 846, 2, 0, 0, string_start_match_p);
    NEW_PROC(g_nm + 850, 2, 0, 0, string_starts_eqv_p);
    NEW_PROC(g_nm + 853, 2, 0, 0, string_starts_with_p);
    NEW_PROC(g_nm + 857, 3, 0, 0, string_substitute);
    NEW_PROC(g_nm + 875, 1, 0, 0, string_to_c_name_x);
    NEW_PROC(g_nm + 891, 1, 0, 0, string_to_camelcase);
    NEW_PROC(g_nm + 909, 3, 0, 0, string_tr);
    NEW_PROC(g_nm + 919, 3, 0, 0, string_tr_x);
    NEW_PROC(g_nm + 930, 1, 0, 0, string_upcase);
    NEW_PROC(g_nm + 944, 1, 0, 0, string_upcase_x);
    NEW_PROC(g_nm + 959, 1, 0, 0, sub_shell_str);
    NEW_PROC(g_nm + 973, 0, 0, 0, suffix);
    NEW_PROC(g_nm + 980, 0, 0, 1, sum);
    NEW_PROC(g_nm + 984, 1, 0, 0, time_string_to_number);
    NEW_PROC(g_nm +1004, 0, 1, 0, tpl_file);
    NEW_PROC(g_nm +1013, 0, 1, 0, tpl_file_line);
    NEW_PROC(g_nm +1027, 0, 1, 0, tpl_file_next_line);
    NEW_PROC(g_nm +1046, 3, 0, 0, version_compare);
}
#undef NEW_PROC
/* end of expr.ini */
