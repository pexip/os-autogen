/*   -*- buffer-read-only: t -*- vi: set ro:
 *  
 *  DO NOT EDIT THIS FILE   (opts.h)
 *  
 *  It has been AutoGen-ed  June 26, 2011 at 07:40:00 AM by AutoGen 5.11.10pre11
 *  From the definitions    opts.def
 *  and the template file   options
 *
 * Generated from AutoOpts 35:0:10 templates.
 *
 *  AutoOpts is a copyrighted work.  This header file is not encumbered
 *  by AutoOpts licensing, but is provided under the licensing terms chosen
 *  by the autogen author or copyright holder.  AutoOpts is
 *  licensed under the terms of the LGPL.  The redistributable library
 *  (``libopts'') is licensed under the terms of either the LGPL or, at the
 *  users discretion, the BSD license.  See the AutoOpts and/or libopts sources
 *  for details.
 *
 * This source file is copyrighted and licensed under the following terms:
 *
 *  Copyright (C) 1992-2011 Bruce Korb, all rights reserved.
 *  This is free software. It is licensed for use, modification and
 *  redistribution under the terms of the
 *  GNU General Public License, version 3 or later
 *      <http://gnu.org/licenses/gpl.html>
 *  
PFX>autogen is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  autogen is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License along
 *  with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 *  This file contains the programmatic interface to the Automated
 *  Options generated for the autogen program.
 *  These macros are documented in the AutoGen info file in the
 *  "AutoOpts" chapter.  Please refer to that doc for usage help.
 */
#ifndef AUTOOPTS_OPTS_H_GUARD
#define AUTOOPTS_OPTS_H_GUARD 1
#include <autoopts/options.h>
#include <stdarg.h>

/*
 *  Ensure that the library used for compiling this generated header is at
 *  least as new as the version current when the header template was released
 *  (not counting patch version increments).  Also ensure that the oldest
 *  tolerable version is at least as old as what was current when the header
 *  template was released.
 */
#define AO_TEMPLATE_VERSION 143360
#if (AO_TEMPLATE_VERSION < OPTIONS_MINIMUM_VERSION) \
 || (AO_TEMPLATE_VERSION > OPTIONS_STRUCT_VERSION)
# error option template version mismatches autoopts/options.h header
  Choke Me.
#endif

/*
 *  Enumeration of each option:
 */
typedef enum {
    INDEX_OPT_TEMPL_DIRS        =  0,
    INDEX_OPT_OVERRIDE_TPL      =  1,
    INDEX_OPT_LIB_TEMPLATE      =  2,
    INDEX_OPT_BASE_NAME         =  3,
    INDEX_OPT_DEFINITIONS       =  4,
    INDEX_OPT_LOAD_SCHEME       =  5,
    INDEX_OPT_LOAD_FUNCTIONS    =  6,
    INDEX_OPT_SKIP_SUFFIX       =  7,
    INDEX_OPT_SELECT_SUFFIX     =  8,
    INDEX_OPT_SOURCE_TIME       =  9,
    INDEX_OPT_NO_FMEMOPEN       = 10,
    INDEX_OPT_EQUATE            = 11,
    INDEX_OPT_WRITABLE          = 12,
    INDEX_OPT_LOOP_LIMIT        = 14,
    INDEX_OPT_SHELL             = 15,
    INDEX_OPT_TIMEOUT           = 16,
    INDEX_OPT_TRACE             = 17,
    INDEX_OPT_TRACE_OUT         = 18,
    INDEX_OPT_SHOW_DEFS         = 19,
    INDEX_OPT_USED_DEFINES      = 20,
    INDEX_OPT_DEFINE            = 22,
    INDEX_OPT_UNDEFINE          = 23,
    INDEX_OPT_MAKE_DEP          = 25,
    INDEX_OPT_CORE              = 26,
    INDEX_OPT_VERSION           = 27,
    INDEX_OPT_HELP              = 28,
    INDEX_OPT_MORE_HELP         = 29,
    INDEX_OPT_USAGE             = 30,
    INDEX_OPT_SAVE_OPTS         = 31,
    INDEX_OPT_LOAD_OPTS         = 32
} teOptIndex;

#define OPTION_CT    33
#define AUTOGEN_VERSION       "5.12"
#define AUTOGEN_FULL_VERSION  "autogen (GNU AutoGen) 5.12"

/*
 *  Interface defines for all options.  Replace "n" with the UPPER_CASED
 *  option name (as in the teOptIndex enumeration above).
 *  e.g. HAVE_OPT(TEMPL_DIRS)
 */
#define         DESC(n) (autogenOptions.pOptDesc[INDEX_OPT_## n])
#define     HAVE_OPT(n) (! UNUSED_OPT(& DESC(n)))
#define      OPT_ARG(n) (DESC(n).optArg.argString)
#define    STATE_OPT(n) (DESC(n).fOptState & OPTST_SET_MASK)
#define    COUNT_OPT(n) (DESC(n).optOccCt)
#define    ISSEL_OPT(n) (SELECTED_OPT(&DESC(n)))
#define ISUNUSED_OPT(n) (UNUSED_OPT(& DESC(n)))
#define  ENABLED_OPT(n) (! DISABLED_OPT(& DESC(n)))
#define  STACKCT_OPT(n) (((tArgList*)(DESC(n).optCookie))->useCt)
#define STACKLST_OPT(n) (((tArgList*)(DESC(n).optCookie))->apzArgs)
#define    CLEAR_OPT(n) STMTS( \
                DESC(n).fOptState &= OPTST_PERSISTENT_MASK;   \
                if ((DESC(n).fOptState & OPTST_INITENABLED) == 0) \
                    DESC(n).fOptState |= OPTST_DISABLED; \
                DESC(n).optCookie = NULL )

/* * * * * *
 *
 *  Enumeration of autogen exit codes
 */
typedef enum {
    AUTOGEN_EXIT_SUCCESS = 0,
    AUTOGEN_EXIT_OPTION_ERROR = 1,
    AUTOGEN_EXIT_BAD_TEMPLATE = 2,
    AUTOGEN_EXIT_BAD_DEFINITIONS = 3,
    AUTOGEN_EXIT_LOAD_ERROR = 4,
    AUTOGEN_EXIT_SIGNAL = 5
} autogen_exit_code_t;
/* * * * * *
 *
 *  Interface defines for specific options.
 */
#define VALUE_OPT_TEMPL_DIRS     'L'

#define SET_OPT_TEMPL_DIRS(a)   STMTS( \
        DESC(TEMPL_DIRS).optActualIndex = 0; \
        DESC(TEMPL_DIRS).optActualValue = VALUE_OPT_TEMPL_DIRS; \
        DESC(TEMPL_DIRS).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(TEMPL_DIRS).fOptState |= OPTST_SET; \
        DESC(TEMPL_DIRS).optArg.argString = (a); \
        (*(DESC(TEMPL_DIRS).pOptProc))(&autogenOptions, \
                autogenOptions.pOptDesc + 0); )
#define VALUE_OPT_OVERRIDE_TPL   'T'
#define VALUE_OPT_LIB_TEMPLATE   'l'
#define VALUE_OPT_BASE_NAME      'b'
#define VALUE_OPT_DEFINITIONS    4

#define SET_OPT_DEFINITIONS(a)   STMTS( \
        DESC(DEFINITIONS).optActualIndex = 4; \
        DESC(DEFINITIONS).optActualValue = VALUE_OPT_DEFINITIONS; \
        DESC(DEFINITIONS).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(DEFINITIONS).fOptState |= OPTST_SET; \
        DESC(DEFINITIONS).optArg.argString = (a) )
#define DISABLE_OPT_DEFINITIONS   STMTS( \
        DESC(DEFINITIONS).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(DEFINITIONS).fOptState |= OPTST_SET | OPTST_DISABLED; \
        DESC(DEFINITIONS).optArg.argString = NULL )
#define VALUE_OPT_LOAD_SCHEME    'S'

#define SET_OPT_LOAD_SCHEME(a)   STMTS( \
        DESC(LOAD_SCHEME).optActualIndex = 5; \
        DESC(LOAD_SCHEME).optActualValue = VALUE_OPT_LOAD_SCHEME; \
        DESC(LOAD_SCHEME).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(LOAD_SCHEME).fOptState |= OPTST_SET; \
        DESC(LOAD_SCHEME).optArg.argString = (a); \
        (*(DESC(LOAD_SCHEME).pOptProc))(&autogenOptions, \
                autogenOptions.pOptDesc + 5); )
#define VALUE_OPT_LOAD_FUNCTIONS 'F'
#define VALUE_OPT_SKIP_SUFFIX    's'
#define VALUE_OPT_SELECT_SUFFIX  'o'
#define VALUE_OPT_SOURCE_TIME    9
#define VALUE_OPT_NO_FMEMOPEN    'm'
#define VALUE_OPT_EQUATE         11
#define VALUE_OPT_WRITABLE       12

#define SET_OPT_WRITABLE   STMTS( \
        DESC(WRITABLE).optActualIndex = 12; \
        DESC(WRITABLE).optActualValue = VALUE_OPT_WRITABLE; \
        DESC(WRITABLE).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(WRITABLE).fOptState |= OPTST_SET )
#define DISABLE_OPT_WRITABLE   STMTS( \
        DESC(WRITABLE).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(WRITABLE).fOptState |= OPTST_SET | OPTST_DISABLED; \
        DESC(WRITABLE).optArg.argString = NULL )
#define VALUE_OPT_LOOP_LIMIT     14

#define OPT_VALUE_LOOP_LIMIT     (DESC(LOOP_LIMIT).optArg.argInt)
#define VALUE_OPT_SHELL          15
#define VALUE_OPT_TIMEOUT        't'
#ifdef SHELL_ENABLED

#define OPT_VALUE_TIMEOUT        (DESC(TIMEOUT).optArg.argInt)
#endif /* SHELL_ENABLED */
#define VALUE_OPT_TRACE          17

typedef enum {
    TRACE_NOTHING,         TRACE_DEBUG_MESSAGE,   TRACE_SERVER_SHELL,
    TRACE_TEMPLATES,       TRACE_BLOCK_MACROS,    TRACE_EXPRESSIONS,
    TRACE_EVERYTHING
} te_Trace;
#define OPT_TRACE_VAL2STR(_v)    optionKeywordName(&DESC(TRACE), (_v))
#define OPT_VALUE_TRACE          (DESC(TRACE).optArg.argEnum)
#define VALUE_OPT_TRACE_OUT      18
#define VALUE_OPT_SHOW_DEFS      19
#define VALUE_OPT_USED_DEFINES   20
#define VALUE_OPT_DEFINE         'D'

#define SET_OPT_DEFINE(a)   STMTS( \
        DESC(DEFINE).optActualIndex = 22; \
        DESC(DEFINE).optActualValue = VALUE_OPT_DEFINE; \
        DESC(DEFINE).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(DEFINE).fOptState |= OPTST_SET; \
        DESC(DEFINE).optArg.argString = (a); \
        (*(DESC(DEFINE).pOptProc))(&autogenOptions, \
                autogenOptions.pOptDesc + 22); )
#define VALUE_OPT_UNDEFINE       'U'

#define SET_OPT_UNDEFINE(a)   STMTS( \
        DESC(DEFINE).optActualIndex = 23; \
        DESC(DEFINE).optActualValue = VALUE_OPT_UNDEFINE; \
        DESC(DEFINE).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(DEFINE).fOptState |= OPTST_SET | OPTST_EQUIVALENCE; \
        DESC(DEFINE).optArg.argString = (a); \
        (*(DESC(UNDEFINE).pOptProc))(&autogenOptions, \
                autogenOptions.pOptDesc + INDEX_OPT_DEFINE); )
#define VALUE_OPT_MAKE_DEP       'M'
#define VALUE_OPT_CORE           'C'
#define VALUE_OPT_HELP          '?'
#define VALUE_OPT_MORE_HELP     '!'
#define VALUE_OPT_VERSION       'v'
#define VALUE_OPT_USAGE         'u'
#define VALUE_OPT_SAVE_OPTS     '>'
#define VALUE_OPT_LOAD_OPTS     '<'
#define SET_OPT_SAVE_OPTS(a)   STMTS( \
        DESC(SAVE_OPTS).fOptState &= OPTST_PERSISTENT_MASK; \
        DESC(SAVE_OPTS).fOptState |= OPTST_SET; \
        DESC(SAVE_OPTS).optArg.argString = (char const*)(a) )
/*
 *  Interface defines not associated with particular options
 */
#define ERRSKIP_OPTERR  STMTS(autogenOptions.fOptSet &= ~OPTPROC_ERRSTOP)
#define ERRSTOP_OPTERR  STMTS(autogenOptions.fOptSet |= OPTPROC_ERRSTOP)
#define RESTART_OPT(n)  STMTS( \
                autogenOptions.curOptIdx = (n); \
                autogenOptions.pzCurOpt  = NULL)
#define START_OPT       RESTART_OPT(1)
#define USAGE(c)        (*autogenOptions.pUsageProc)(&autogenOptions, c)
/* extracted from opthead.tlib near line 451 */

#ifdef  __cplusplus
extern "C" {
#endif

/* * * * * *
 *
 *  Globals exported from the The Automated Program Generator option definitions
 */
extern char const * pzTemplFileName;
extern ag_bool      trace_is_to_pipe;
extern void vusage_message(char const * fmt, va_list ap);
extern void usage_message(char const * fmt, ...);


/* * * * * *
 *
 *  Declare the autogen option descriptor.
 */
extern tOptions autogenOptions;

#if defined(ENABLE_NLS)
# ifndef _
#   include <stdio.h>
static inline char* aoGetsText(char const* pz) {
    if (pz == NULL) return NULL;
    return (char*)gettext(pz);
}
#   define _(s)  aoGetsText(s)
# endif /* _() */

# define OPT_NO_XLAT_CFG_NAMES  STMTS(autogenOptions.fOptSet |= \
                                    OPTPROC_NXLAT_OPT_CFG;)
# define OPT_NO_XLAT_OPT_NAMES  STMTS(autogenOptions.fOptSet |= \
                                    OPTPROC_NXLAT_OPT|OPTPROC_NXLAT_OPT_CFG;)

# define OPT_XLAT_CFG_NAMES     STMTS(autogenOptions.fOptSet &= \
                                  ~(OPTPROC_NXLAT_OPT|OPTPROC_NXLAT_OPT_CFG);)
# define OPT_XLAT_OPT_NAMES     STMTS(autogenOptions.fOptSet &= \
                                  ~OPTPROC_NXLAT_OPT;)

#else   /* ENABLE_NLS */
# define OPT_NO_XLAT_CFG_NAMES
# define OPT_NO_XLAT_OPT_NAMES

# define OPT_XLAT_CFG_NAMES
# define OPT_XLAT_OPT_NAMES

# ifndef _
#   define _(_s)  _s
# endif
#endif  /* ENABLE_NLS */

#ifdef  __cplusplus
}
#endif
#endif /* AUTOOPTS_OPTS_H_GUARD */
/* opts.h ends here */
